//gps data.. send.. move
#include <ESP8266WiFi.h>;
#include <WiFiClient.h>;
#include <ThingSpeak.h>;
#include <ESP8266WiFi.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
TinyGPSPlus gps;  // The TinyGPS++ object
SoftwareSerial ss(4, 5); // The serial connection to the GPS device
const char* ssid = "POCO F1";
const char* password = "anubhav1";
float latitude , longitude;
float lat1,lon1;
WiFiServer server(80);

WiFiClient client;
unsigned long myChannelNumber = 717502; //Your Channel Number (Without Brackets)
const char * myWriteAPIKey = "854IANACKQANIKAC"; //Your Write API Key
//bot movement pre fucntion begins
/* define L298N or L293D motor control pins */
//int leftMotorForward = 2;     /* GPIO2(D4) -> IN3   */
int leftMotorForward = 12;
int rightMotorForward = 15;   /* GPIO15(D8) -> IN1  */
//int leftMotorBackward = 0;
int leftMotorBackward = 10;/* GPIO0(D3) -> IN4   */
int rightMotorBackward = 13;  /* GPIO13(D7) -> IN2  */
/* define L298N or L293D enable pins */
int rightMotorENB = 14; /* GPIO14(D5) -> Motor-A Enable */
int leftMotorENB = 12; /* GPIO12(D6) -> Motor-B Enable */
//bot movement pre function ends

void setup() {
  // put your setup code here, to run once:
 Serial.begin(115200);
Serial.print("prefunction");
  ss.begin(9600);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());

//gps end
//send data start
//Serial.begin(9600);
 delay(10);
 // Connect to WiFi network 
//WiFi.begin(ssid, password);
ThingSpeak.begin(client);
Serial.print("thingspeak started");
//send data end
 /* initialize motor control pins as output */
  pinMode(leftMotorForward, OUTPUT);
  pinMode(rightMotorForward, OUTPUT); 
  pinMode(leftMotorBackward, OUTPUT);  
  pinMode(rightMotorBackward, OUTPUT);

  /* initialize motor enable pins as output */
  pinMode(leftMotorENB, OUTPUT); 
  pinMode(rightMotorENB, OUTPUT);
}


void loop()
{
while (ss.available() > 0)
    if (gps.encode(ss.read()))
    {
      latitude=(gps.location.lat());
  longitude=(gps.location.lng());
  if(latitude>1)
  {//Serial.print(latitude);
  lat1=latitude;
 // Serial.print(longitude);
  lon1=longitude;
//  Serial.print("latt,lonn;");
//  Serial.print(latt);
//  Serial.print(lonn);
      
   
  Serial.print("Lat:");
  Serial.print(lat1);
  Serial.print("lon:");
  Serial.print(lon1);
  delay(5000);

delay(1000);
 
ThingSpeak.writeField(myChannelNumber, 1,lat1, myWriteAPIKey);
ThingSpeak.writeField(717515, 1,lon1, "3J22WNZK9MB1YKVD");
delay(5000);
Serial.print("\n uploaded");
MotorBackward();
delay(5000);
Serial.print("backward");
MotorStop();
delay(5000);

}
}        
}

void MotorStop(void)   
{
  digitalWrite(leftMotorENB,HIGH);
  digitalWrite(rightMotorENB,HIGH);
  digitalWrite(leftMotorForward,LOW);
  digitalWrite(leftMotorBackward,LOW);
  digitalWrite(rightMotorForward,LOW);
  digitalWrite(rightMotorBackward,LOW);
}
void MotorForward(void)   
{
  digitalWrite(leftMotorENB,HIGH);
  digitalWrite(rightMotorENB,HIGH);
  digitalWrite(leftMotorForward,HIGH);
  digitalWrite(rightMotorForward,HIGH);
  digitalWrite(leftMotorBackward,LOW);
  digitalWrite(rightMotorBackward,LOW);
  
}
void MotorBackward(void)   
{
  digitalWrite(leftMotorENB,HIGH);
  digitalWrite(rightMotorENB,HIGH);
  digitalWrite(leftMotorBackward,HIGH);
  digitalWrite(rightMotorBackward,HIGH);
  digitalWrite(leftMotorForward,LOW);
  digitalWrite(rightMotorForward,LOW);
}
